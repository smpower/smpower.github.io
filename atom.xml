<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>若非的日志</title>
  
  <subtitle>爱编码 - 爱生活 - 爱分享</subtitle>
  <link href="https://hi-ruofei.com/atom.xml" rel="self"/>
  
  <link href="https://hi-ruofei.com/"/>
  <updated>2021-07-04T14:30:35.000Z</updated>
  <id>https://hi-ruofei.com/</id>
  
  <author>
    <name>若非</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>TypeScript Utility Types - NonNullable: TypeScript 实用类型 - NonNullable</title>
    <link href="https://hi-ruofei.com/post/9a86a6f1/"/>
    <id>https://hi-ruofei.com/post/9a86a6f1/</id>
    <published>2021-07-04T14:30:35.000Z</published>
    <updated>2021-07-04T14:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍 TypeScript 实用类型中的 <code>NonNullable&lt;Type&gt;</code> 类型。<code>NonNullable</code> 会从传入的类型中将 <code>null</code> 和 <code>undefined</code> 排除，之后把剩下的成员构造成一个新类型。</p><p>下面是一个简单的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> U1 = <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">type</span> T0 = NonNullable&lt;U1&gt;;</span><br></pre></td></tr></table></figure><span id="more"></span><p>上面的代码中定义了一个名为 <code>U1</code> 的联合类型，<code>NonNullable</code> 会将该类型中的 <code>undefined</code> 排除，再将剩余的成员构造成新的类型 <code>T0</code>，类型 <code>T0</code> 等价于下面的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewT0 = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><p>再看一个包含成员 <code>null</code> 的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> U2 = <span class="built_in">string</span>[] | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">type</span> T1 = NonNullable&lt;U2&gt;;</span><br></pre></td></tr></table></figure><p>上面的类型 <code>U2</code> 中包含成员 <code>null</code>，因此 <code>NonNullable</code> 会把 <code>null</code> 和 <code>undefined</code> 都排除掉，构造的新类型便是 <code>string[]</code>。类型 <code>T1</code> 等价于下面的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewT1 = <span class="built_in">string</span>[];</span><br></pre></td></tr></table></figure><p><code>NonNullable</code> 的类型定义源码中通过 <code>extends</code> 实现，源码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude null and undefined from T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> NonNullable&lt;T&gt; = T <span class="keyword">extends</span> <span class="literal">null</span> | <span class="literal">undefined</span> ? <span class="built_in">never</span> : T;</span><br></pre></td></tr></table></figure><p><code>never</code> 表示从来不会出现的值的类型，因此联合类型的当成员为 <code>null</code> 或 <code>undefined</code> 时，<code>NonNullable</code> 会将他们排除，只留下联合类型中的其他成员，通过保留下来的成员构造新的类型，也就是源码中的 <code>T</code> 类型。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇介绍 TypeScript 实用类型中的 &lt;code&gt;NonNullable&amp;lt;Type&amp;gt;&lt;/code&gt; 类型。&lt;code&gt;NonNullable&lt;/code&gt; 会从传入的类型中将 &lt;code&gt;null&lt;/code&gt; 和 &lt;code&gt;undefined&lt;/code&gt; 排除，之后把剩下的成员构造成一个新类型。&lt;/p&gt;
&lt;p&gt;下面是一个简单的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; U1 = &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; | &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; T0 = NonNullable&amp;lt;U1&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Extract: TypeScript 实用类型 - Extract</title>
    <link href="https://hi-ruofei.com/post/568ce723/"/>
    <id>https://hi-ruofei.com/post/568ce723/</id>
    <published>2021-07-04T10:41:38.000Z</published>
    <updated>2021-07-04T10:41:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍 TypeScript 实用类型中的 <code>Extract</code> 类型。看字面意思，<code>Extract</code> 是指<strong>取出</strong>、<strong>挑出</strong>的意思，<code>Extract</code> 会挑选出传入的两个联合类型中相同的成员，将这些相同的成员构造成一个新类型，构造的新类型有可能是联合类型，也有可能是其他任何类型。</p><p>下面是一个简单的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> U1 = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> U2 = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;f&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> T0 = Extract&lt;U1, U2&gt;;</span><br></pre></td></tr></table></figure><span id="more"></span><p>上面代码中定义了两个联合类型 <code>U1</code> 和 <code>U2</code>，这两个联合类型中有一个相同的成员 <code>&quot;a&quot;</code>，<code>Extract</code> 会将该成员 <code>&quot;a&quot;</code> 取出来构造一个新类型。构造的新类型 <code>T0</code> 等价于下面的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 `Extract` 构造了一个新的字符串类型 `NewT0`</span></span><br><span class="line"><span class="keyword">type</span> NewT0 = <span class="string">&quot;a&quot;</span>;</span><br></pre></td></tr></table></figure><p>如果在两个联合类型中，存在多个相同的成员（两个及以上）时，<code>Extract</code> 会将这些成员构造成一个新的<strong>联合类型</strong>，下面是另一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> U3 = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> U4 = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;f&quot;</span> | <span class="string">&quot;c&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> T1 = Extract&lt;U3, U4&gt;;</span><br></pre></td></tr></table></figure><p>上面两个联合类型 <code>U3</code> 和 <code>U4</code> 中存在多个相同的成员：<code>&quot;a&quot;</code> 和 <code>&quot;c&quot;</code>，<code>Extract</code> 会将他们构造成一个新的联合类型，联合类型 <code>T1</code> 与下面的类型是等价的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewT1 = <span class="string">&quot;a&quot;</span> | <span class="string">&quot;c&quot;</span>;</span><br></pre></td></tr></table></figure><p>对初学者来说，还有一种情况容易受到误导，看下面的例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> U5 = <span class="built_in">string</span> | <span class="built_in">number</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>);</span><br><span class="line"><span class="keyword">type</span> U6 = <span class="built_in">Function</span>;</span><br><span class="line"><span class="keyword">type</span> T2 = Extract&lt;U5, U6&gt;; <span class="comment">// type T2 = () =&gt; void;</span></span><br></pre></td></tr></table></figure><p>从字面量的角度来看，<code>U5</code> 和 <code>U6</code> 两个联合类型中并没有相同的成员，但是从类型角度来说 <code>() =&gt; void</code> 表示的是一个函数，它的类型与 <code>Function</code> 是等价的，因此构造出的新类型 <code>T</code> 是一个函数。</p><p>了解了 <code>Extract</code> 的用法，下面看一下它的类型定义源码，<code>Extract</code> 在实现上非常简单，源码如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Extract from T those types that are assignable to U</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Extract&lt;T, U&gt; = T <span class="keyword">extends</span> U ? T : <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure><p>通过 <code>Extract</code> 的源码我们不难发现，<code>Extract</code> 从 <code>T</code> 类型中取出 <code>T</code> 和 <code>U</code> 类型中共有的成员来构造一个新类型，如果其中没有共有成员，将返回 <code>never</code> 类型。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇介绍 TypeScript 实用类型中的 &lt;code&gt;Extract&lt;/code&gt; 类型。看字面意思，&lt;code&gt;Extract&lt;/code&gt; 是指&lt;strong&gt;取出&lt;/strong&gt;、&lt;strong&gt;挑出&lt;/strong&gt;的意思，&lt;code&gt;Extract&lt;/code&gt; 会挑选出传入的两个联合类型中相同的成员，将这些相同的成员构造成一个新类型，构造的新类型有可能是联合类型，也有可能是其他任何类型。&lt;/p&gt;
&lt;p&gt;下面是一个简单的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; U1 = &lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; U2 = &lt;span class=&quot;string&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&amp;quot;f&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; T0 = Extract&amp;lt;U1, U2&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Omit: TypeScript 实用类型 - Omit</title>
    <link href="https://hi-ruofei.com/post/37f6eaa/"/>
    <id>https://hi-ruofei.com/post/37f6eaa/</id>
    <published>2021-06-29T10:44:13.000Z</published>
    <updated>2021-06-29T10:44:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍 TypeScript 实用类型中的 <code>Omit</code> 类型。<code>Omit&lt;Type, Keys&gt;</code> 从类型中选取所有属性，然后通过删除指定键来构造类型。以下面的 <code>User</code> 类型为例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><p>经 <code>Omit</code> 类型转换后得到：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 `User` 类型中的 `age` 和 `gender` 属性</span></span><br><span class="line"><span class="comment">// 只剩下了 `name` 属性</span></span><br><span class="line"><span class="keyword">type</span> OmitUser = Omit&lt;User, <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> omitUser: OmitUser = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Olive&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>转换后的 <code>OmitUser</code> 类型与下面的类型是等价的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> OmitUser = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么，<code>Omit</code> 是如何转换类型的呢？我们通过它的类型定义来分析一下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Construct a type with the properties of T except for those in type K.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Omit&lt;T, K <span class="keyword">extends</span> keyof <span class="built_in">any</span>&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;</span><br></pre></td></tr></table></figure><p><code>Omit</code> 源码的类型定义中有几点需要注意：</p><ul><li><code>K extends keyof any</code>：这段代码表示泛型 <code>K</code> 继承自联合类型 <code>keyof any</code>；</li><li><code>Pick</code> 是 TypeScript 中作用于全局的实用类型，用于从类型中选取一组属性键来构造类型<sup id="fnref:1"><a href="#fn:1" rel="footnote">[1]</a></sup>;</li><li><code>Exclude</code> 是 TypeScript 中另一个作用于全局的实用类型，通过排除联合类型中的指定成员来构造新类型<sup id="fnref:2"><a href="#fn:2" rel="footnote">[2]</a></sup>；</li><li>通过 <code>Exclude</code> 转换后的类型结果就是要挑选出来的成员，再经过 <code>Pick</code> 将他们从类型 <code>T</code> 中选取出来。</li></ul><p>在不了解 <code>Pick</code> 和 <code>Exclude</code> 类型作用的情况下，一般难以看懂 <code>Omit</code> 类型的源码。下面参考部分有相关的传送门，当你理解了 <code>Pick</code> 和 <code>Exclude</code> 后回头再看 <code>Omit</code> 就能理解了。</p><p><a href="https://www.typescriptlang.org/zh/play#code/C4TwDgpgBAqgzhATlAvFA3gKClAdgQwFsIAuKOYRAS1wHMBubKfW0vAV0ICMlGdXcAEyRkK1OowC+jTKEhQA8oSrB4SVIuXAAPGsQAaKAHIWEI1AA+xgcMRGAfDIDGAe1wUoLrXrJKVejSwcAmIyIwUAGyoANzN9TGkgA">Playground Link</a></p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div><div id="footnotes"><div id="footnotelist"><div style="border-bottom: 1px solid #eee; font-size: 1.125em; margin-bottom: 10px; margin-top: 60px;">参考</div><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="/post/bdb49a56/">TypeScript 实用类型：<code>Pick</code></a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="/post/fca5d737/">TypeScript 实用类型：<code>Exclude</code></a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇介绍 TypeScript 实用类型中的 &lt;code&gt;Omit&lt;/code&gt; 类型。&lt;code&gt;Omit&amp;lt;Type, Keys&amp;gt;&lt;/code&gt; 从类型中选取所有属性，然后通过删除指定键来构造类型。以下面的 &lt;code&gt;User&lt;/code&gt; 类型为例：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; User = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gender: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Exclude: TypeScript 实用类型 - Exclude</title>
    <link href="https://hi-ruofei.com/post/fca5d737/"/>
    <id>https://hi-ruofei.com/post/fca5d737/</id>
    <published>2021-06-26T15:17:57.000Z</published>
    <updated>2021-06-26T15:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Exclude&lt;Type, ExcludeUnion&gt;</code> 通过排除联合类型中的指定成员来构造新类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Letter = <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> T0 = Exclude&lt;Letter, <span class="string">&#x27;a&#x27;</span>&gt;;</span><br></pre></td></tr></table></figure><p>上例代码中的类型 <code>T0</code> 等价于下面的写法：</p><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T0 = <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>Exclude</code> 将联合类型 <code>Letter</code> 中的成员 <code>a</code> 排除掉，得到了一个叫 <code>T0</code> 的联合类型。最终在联合类型 <code>T0</code> 中，只有成员 <code>b</code> 和 成员 <code>c</code>。</p><p>那么，<code>Exclude&lt;Type, ExcludeUnion&gt;</code> 是如何排除类型成员的呢？下面我们通过它的类型定义文件分析一下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Exclude from T those types that are assignable to U</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Exclude&lt;T, U&gt; = T <span class="keyword">extends</span> U ? <span class="built_in">never</span> : T;</span><br></pre></td></tr></table></figure><p><code>T extends U ? nver : T</code> 类似于 JavaScript 中的三目运算符，这是 TypeScript 2.8 中引入的<strong>条件类型</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">[1]</a></sup>，意思是：如果 <code>T</code> 类型是 <code>U</code> 类型的子类型的话，返回 <code>never</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">[2]</a></sup>，否则返回 <code>T</code> 类型。通过刚才的例子我们不难发现，<code>Exclude</code> 就是将前面的类型与后面的类型对比，过滤出前面联合类型中独有的成员。</p><p><code>Exclude</code> 除了可以排除联合类型中的字符串成员，还可以过滤函数成员：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyUnion = <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | (<span class="function">() =&gt;</span> <span class="built_in">void</span>);</span><br><span class="line"><span class="keyword">type</span> T2 = Exclude&lt;MyUnion, <span class="built_in">Function</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `T2` 类型等价于下面的 `T3` 类型</span></span><br><span class="line"><span class="keyword">type</span> T3 = <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果是两个联合类型呢？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> U1 = <span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> U2 = <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;5&#x27;</span> | <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="keyword">type</span> U3 = Exclude&lt;U1, U2&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `U3` 类型等价于下面的 `U4` 类型</span></span><br><span class="line"><span class="keyword">type</span> U4 = <span class="string">&#x27;a&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>U3</code> 类型的结果可能让人疑惑，看上去 <code>U1</code> 类型并不是继承自 <code>U2</code> 类型，最后为什么将类型 <code>U1</code> 中的成员 <code>b</code> 和成员 <code>c</code> 过滤掉了呢？首先我们注意到 <code>U1</code> 和 <code>U2</code> 类型都是联合类型，换句话说 <code>U1</code> 类型有可能是 <code>&#39;a&#39;</code>，有可能是 <code>&#39;b&#39;</code>，也有可能是 <code>&#39;c&#39;</code>。显然成员 <code>&#39;a&#39;</code> 没有继承自 <code>U2</code> 类型，而成员 <code>&#39;b&#39;</code> 和成员 <code>&#39;c&#39;</code> 分别继承自类型 <code>U2</code>，所以，最终 <code>Exclude</code> 将 <code>U1</code> 类型中的成员 <code>&#39;b&#39;</code> 和成员 <code>&#39;c&#39;</code> 排除掉，只留下了成员 <code>&#39;a&#39;</code>。</p><div id="footnotes"><div id="footnotelist"><div style="border-bottom: 1px solid #eee; font-size: 1.125em; margin-bottom: 10px; margin-top: 60px;">参考</div><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html">TypeScript 条件类型</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-never-type">TypeScript <code>never</code> 类型</a><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Exclude&amp;lt;Type, ExcludeUnion&amp;gt;&lt;/code&gt; 通过排除联合类型中的指定成员来构造新类型。&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; Letter = &lt;span class=&quot;string&quot;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt; | &lt;span class=&quot;string&quot;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; T0 = Exclude&amp;lt;Letter, &lt;span class=&quot;string&quot;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上例代码中的类型 &lt;code&gt;T0&lt;/code&gt; 等价于下面的写法：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Pick: TypeScript 实用类型 - Pick</title>
    <link href="https://hi-ruofei.com/post/bdb49a56/"/>
    <id>https://hi-ruofei.com/post/bdb49a56/</id>
    <published>2021-06-25T17:31:10.000Z</published>
    <updated>2021-06-25T17:31:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Pick&lt;Type, Keys&gt;</code> 可从类型中选取一组属性键来构造类型。以下面的 <code>User</code> 类型为例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><p>经 <code>Pick&lt;Type, Keys&gt;</code> 转换后得到：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PickUser = Pick&lt;User, <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `PickUser` 类型相对于 `User` 类型少了 `gender` 属性</span></span><br><span class="line"><span class="keyword">const</span> pickUser: PickUser = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Olive&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>转换后的 <code>PickUser</code> 类型与下面的类型是等价的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PickUser = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么，<code>Pick&lt;Type, Keys&gt;</code> 是如何转换类型的呢？我们通过它的类型定义来分析一下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * From T, pick a set of properties whose keys are in the union K</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Pick&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>结合上面的示例，<code>Pick</code> 类型定义中的泛型 <code>T</code> 就是我们刚才定义的类型 <code>User</code>，后面的 <code>K extends keyof T</code> 则表示泛型 <code>K</code> 继承自联合类型 <code>keyof T</code>，由此可以得出泛型 <code>K</code> 是一个联合类型。</p><p>通过关键字 <code>in</code> 来遍历联合类型 <code>K</code>，将联合类型中的每个成员作为 key，通过方括号语法访问类型 <code>T</code> 中该成员对应的值，即 <code>T[P]</code>。</p><p>以上就是 <code>Pick&lt;Type, Keys&gt;</code> 的用法和类型定义的解析，欢迎在下方留言交流。</p><p><a href="https://www.typescriptlang.org/zh/play#code/C4TwDgpgBAqgzhATlAvFA3gKClAdgQwFsIAuKOYRAS1wHMBubKfW0vAV0ICMlGdXcAEyRkK1OowC+jTKEhQAClQDGAa3hJUilaoA8GxABooAcgLETUAD6mWEEwD4ZAemdQABkrUH3UQN4+gNHqgB9ugJ-agHFyHj7+AYCIOoBhch4Cwoi+gHo6gOQGmMoA9rgUUGA6BmRe6gjIaFg45mwmAPIANlQAbvaGTHZkAIwAHO3SmEA">Playground Link</a></p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Pick&amp;lt;Type, Keys&amp;gt;&lt;/code&gt; 可从类型中选取一组属性键来构造类型。以下面的 &lt;code&gt;User&lt;/code&gt; 类型为例：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; User = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gender: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Docker 入门之安装教程</title>
    <link href="https://hi-ruofei.com/post/fff5156a/"/>
    <id>https://hi-ruofei.com/post/fff5156a/</id>
    <published>2021-06-22T11:45:59.000Z</published>
    <updated>2021-06-22T11:45:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍了在 Mac OS, Windows, Linux 下的 Docker 安装方法。开始之前我们先看一下官方对 Docker 的介绍：</p><blockquote><p>Docker Engine is available for Linux (<a href="https://store.docker.com/editions/community/docker-ce-server-centos">CentOS</a>, <a href="https://store.docker.com/editions/community/docker-ce-server-debian">Debian</a>, <a href="https://store.docker.com/editions/community/docker-ce-server-fedora">Fedora</a>, <a href="https://store.docker.com/editions/enterprise/docker-ee-server-oraclelinux">Oracle Linux</a>, <a href="https://store.docker.com/editions/enterprise/docker-ee-server-rhel">RHEL</a>, <a href="https://store.docker.com/editions/enterprise/docker-ee-server-sles">SUSE</a>, and <a href="https://store.docker.com/editions/community/docker-ce-server-ubuntu">Ubuntu</a>) or <a href="https://store.docker.com/editions/enterprise/docker-ee-server-windows">Windows Server</a> operating systems and is based on containerd - the open source container runtime project that Docker donated to the Cloud Native Computing Foundation (CNCF) in 2017. It is available as both a free community-supported engine and as a commercially-supported enterprise engine (Docker Engine-Enterprise) that also forms the foundation for an enterprise container platform.</p></blockquote><p>通过官方的介绍我们不难发现，Docker 已经基本上覆盖了全平台，对于英文好的朋友，直接去官网按照指南一步一步安装即可。</p><p>英文一般的朋友，继续往下看吧那就～</p><span id="more"></span><h2 id="Mac-OS-上的-Docker-安装方法"><a href="#Mac-OS-上的-Docker-安装方法" class="headerlink" title="Mac OS 上的 Docker 安装方法"></a>Mac OS 上的 Docker 安装方法</h2><p>第一种方法是下载官方的 <code>dmg</code> 安装包：</p><p><a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac">Docker Descktop for Mac</a></p><p>安装该软件包对系统的要求：</p><blockquote><p>Requires Apple Mac OS Sierra 10.12 or above. Download <a href="https://docs.docker.com/toolbox/overview/">Docker Toolbox</a> for previous OS versions.</p></blockquote><p>只要系统是 Mac OS Sierra 10.12 以上即可。</p><p>下载完 <code>Docker.dmg</code> 安装包之后，双击即可以安装，可能需要系统管理员权限，输入密码即可。</p><p>安装成功后，在系统菜单栏上会有 Docker 的小图标：</p><p><img src="https://gitee.com/smpower/oss/raw/master/hi-ruofei.com/Xt0mTI.png" alt="Docker 小图标"></p><p>安装完之后，在终端工具中，使用 <code>docker version</code> 来查看 Docker 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker version</span><br><span class="line">Client:</span><br><span class="line"> Cloud integration: 1.0.14</span><br><span class="line"> Version:           20.10.6</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.16.3</span><br><span class="line"> Git commit:        370c289</span><br><span class="line"> Built:             Fri Apr  9 22:46:57 2021</span><br><span class="line"> OS/Arch:           darwin/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.6</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       8728dd2</span><br><span class="line">  Built:            Fri Apr  9 22:44:56 2021</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.4.4</span><br><span class="line">  GitCommit:        05f951a3781f4f2c1911b05e61c160e9c30eaa8e</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc93</span><br><span class="line">  GitCommit:        12644e614e25b05da6fd08a38ffa0cfe1903fdec</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure><p>设置中国区加速地址：</p><p><img src="https://gitee.com/smpower/oss/raw/master/hi-ruofei.com/xaybI4.png" alt="设置 Docker 中国区加速地址"></p><p>上面打码的地址是阿里云提供的 Docker 镜像加速地址，每个人都可以去申请一个个人镜像地使用。</p><blockquote><p>阿里云 Docker 镜像加速：<a href="https://yq.aliyun.com/articles/29941">Docker 镜像加速器</a></p></blockquote><p>第二种方法是通过 <code>brew cask</code> 安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ brew update</span><br><span class="line">➜  ~ brew cask install docker</span><br><span class="line">➜  ~ brew cask uninstall docker <span class="comment"># 删除的方法, 还需要手动删除Docker.app</span></span><br></pre></td></tr></table></figure><p>上面的命令将会把 Docker 安装在 <code>Applications</code> 目录下。</p><h2 id="Windows-上-Docker-安装"><a href="#Windows-上-Docker-安装" class="headerlink" title="Windows 上 Docker 安装"></a>Windows 上 Docker 安装</h2><p>官方下载地址：<a href="https://hub.docker.com/editions/community/docker-ce-desktop-windows">Docker Desktop for Windows</a></p><p>对系统的要求：</p><blockquote><p>Requires Microsoft Windows 10 Professional or Enterprise 64-bit. For previous versions get <a href="https://docs.docker.com/toolbox/overview/">Docker Toolbox</a>.</p></blockquote><p>需要 Windows 10 专业版及企业的 64 位版本，在 Windows server 2016 以上亲测是可用的。Windows 8/7/Vista/Xp 之类的，就别想了，老实去装 Windows 10 或者虚拟机中去使用。</p><h2 id="Linux-上-Docker-安装"><a href="#Linux-上-Docker-安装" class="headerlink" title="Linux 上 Docker 安装"></a>Linux 上 Docker 安装</h2><p>下面介绍最常见的 Linux 系统下安装 Docker 的方法。</p><h3 id="Centos-中-Docker-安装方法"><a href="#Centos-中-Docker-安装方法" class="headerlink" title="Centos 中 Docker 安装方法"></a>Centos 中 Docker 安装方法</h3><ol><li><p>先删除旧的版本（如果没有可以跳过）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</span><br></pre></td></tr></table></figure></li><li><p>安装必须的依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>添加 <code>stable</code> 的 Docker-ce 的源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>安装 <code>docker-ce</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>选择指定的安装版本（可选）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span><br></pre></td></tr></table></figure><p>我们来举个例子，比如我们要安装 <code>3:18.09.1-3.el7</code> 这个版本，使用如下命令结构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo yum install docker-ce- docker-ce-cli- containerd.io</span><br></pre></td></tr></table></figure><p>第一部分是 <code>docker-ce</code>，第二部分是版本号 <code>18.09.1</code>，看明白了吗？就是这样子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y docker-ce-18.09.1 docker-ce-cli-18.09.1</span><br></pre></td></tr></table></figure></li><li><p>启动服务并测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ sudo systemctl start docker <span class="comment"># 启动服务</span></span><br><span class="line">$ sudo docker run hello-world <span class="comment"># 来一个 Hello World 吧</span></span><br><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">1b930d010525: Pull complete</span><br><span class="line">Digest: sha256:2557e3c07ed1e38f26e389462d03ed943586f744621577a99efb77324b0fe535</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line">1. The Docker client contacted the Docker daemon.</span><br><span class="line">2. The Docker daemon pulled the <span class="string">&quot;hello-world&quot;</span> image from the Docker Hub.</span><br><span class="line">(amd64)</span><br><span class="line">3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">executable that produces the output you are currently reading.</span><br><span class="line">4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line">$ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line">https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line">https://docs.docker.com/get-started/</span><br></pre></td></tr></table></figure><p>如果看到上面的提示，说明 Docker 已经成功安装并运行了。</p></li><li><p>关于升级&amp;删除：</p><p>升级：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y update <span class="comment"># 更新所有</span></span><br><span class="line">$ yum -y update docker-ce docker-ce-cli containerd.io <span class="comment"># 更新指定</span></span><br></pre></td></tr></table></figure><p>删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum remove docker-ce</span><br><span class="line">$ sudo rm -rf /var/lib/docker <span class="comment"># 删除文件系统</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Debian-中-Docker-的安装方法"><a href="#Debian-中-Docker-的安装方法" class="headerlink" title="Debian 中 Docker 的安装方法"></a>Debian 中 Docker 的安装方法</h3><ol><li><p>删除旧的版本(可跳过)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure></li><li><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">apt-transport-https \</span><br><span class="line">ca-certificates \</span><br><span class="line">curl \</span><br><span class="line">gnupg \</span><br><span class="line">lsb-release</span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>stable</code> 安装源：</p><ul><li>x86_64 / amd64</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><ul><li>armhf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=armhf] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure><ul><li>arm64</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/debian <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>安装 <code>docker-ce</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>安装指定的版本（可选）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ apt-cache madison docker-ce</span><br><span class="line">docker-ce | 5:18.09.1~3-0~debian-stretch | https://download.docker.com/linux/debian stretch/stable amd64 Packages</span><br><span class="line">docker-ce | 5:18.09.0~3-0~debian-stretch | https://download.docker.com/linux/debian stretch/stable amd64 Packages</span><br><span class="line">docker-ce | 18.06.1~ce~3-0~debian        | https://download.docker.com/linux/debian stretch/stable amd64 Packages</span><br><span class="line">docker-ce | 18.06.0~ce~3-0~debian        | https://download.docker.com/linux/debian stretch/stable amd64 Packages</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>安装格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce= docker-ce-cli= containerd.io</span><br></pre></td></tr></table></figure><p>举例说明：比如要安装 <code>5:18.09.1~3-0~debian-stretch</code> 版本的 docker 的话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce=18.09.1 docker-ce-cli=18.09.1 containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动服务并测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Docker运行状态</span></span><br><span class="line">$ sudo service docker status</span><br><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></li></ol><h3 id="Ubuntu-中-Docker-安装方法"><a href="#Ubuntu-中-Docker-安装方法" class="headerlink" title="Ubuntu 中 Docker 安装方法"></a>Ubuntu 中 Docker 安装方法</h3><ol><li><p>删除旧的版本(可跳过)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure></li><li><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install</span><br><span class="line">apt-transport-https</span><br><span class="line">ca-certificates</span><br><span class="line">curl</span><br><span class="line">gnupg-agent</span><br><span class="line">software-properties-common</span><br><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - <span class="comment"># 添加GPG key</span></span><br><span class="line">$ sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">pub   rsa4096 2017-02-22 [SCEA]</span><br><span class="line">9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</span><br><span class="line">uid           [ unknown] Docker Release (CE deb)</span><br><span class="line">sub   rsa4096 2017-02-22 [S]</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>stable</code> 安装源：</p><ul><li><p>x86_64/amd64</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>[armhf]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=armhf] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>[arm64]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=arm64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>[ppc64le (IBM Power)]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=ppc64el] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>s390x (IBM Z)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">&quot;deb [arch=s390x] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装 <code>docker-ce</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure></li><li><p>安装指定的版本（可选）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-cache madison docker-ce  docker-ce | 5:18.09.1~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  docker-ce | 5:18.09.0~3-0~ubuntu-xenial | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  docker-ce | 18.06.1~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  docker-ce | 18.06.0~ce~3-0~ubuntu       | https://download.docker.com/linux/ubuntu  xenial/stable amd64 Packages  ...</span><br></pre></td></tr></table></figure><p>安装格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce= docker-ce-cli= containerd.io</span><br></pre></td></tr></table></figure><p>举例说明：比如要安装 <code>5:18.09.1~3-0~ubuntu-xenial</code> 版本的 docker 的话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-ce=18.09.1 docker-ce-cli=18.09.1 containerd.io</span><br></pre></td></tr></table></figure></li><li><p>启动服务并测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker start</span><br><span class="line">$ sudo service docker status <span class="comment"># 查看 Docker 运行状态</span></span><br><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></li></ol><h2 id="Docker-compose-集合命令"><a href="#Docker-compose-集合命令" class="headerlink" title="Docker-compose 集合命令"></a>Docker-compose 集合命令</h2><p>Compose 工具是一个 <code>批量</code> 工具，用于运行与管理多个 <code>docker</code> 容器。</p><p>官方文档：<a href="https://docs.docker.com/compose/install/">Install Docker Compose</a></p><ol><li><p>在 Mac/Windows 中，已经集成了 docker-compose 命令</p></li><li><p>在 WindowsServer 中 先启动 PowerShell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12</span><br></pre></td></tr></table></figure><p>然后运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-WebRequest <span class="string">&quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-Windows-x86_64.exe&quot;</span> -UseBasicParsing -OutFile <span class="variable">$Env</span>:ProgramFilesDockerdocker-compose.exe</span><br></pre></td></tr></table></figure><p>然后测试一下：<code>docker-compose --version</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载docker-compose</span></span><br><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 给予执行权限</span></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"><span class="comment"># 测试命令</span></span><br><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.23.2, build 1110ad01</span><br></pre></td></tr></table></figure></li></ol><p>以上就是在各个平台安装 Docker 的步骤，欢迎在下方留言交流。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;本篇介绍了在 Mac OS, Windows, Linux 下的 Docker 安装方法。开始之前我们先看一下官方对 Docker 的介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker Engine is available for Linux (&lt;a href=&quot;https://store.docker.com/editions/community/docker-ce-server-centos&quot;&gt;CentOS&lt;/a&gt;, &lt;a href=&quot;https://store.docker.com/editions/community/docker-ce-server-debian&quot;&gt;Debian&lt;/a&gt;, &lt;a href=&quot;https://store.docker.com/editions/community/docker-ce-server-fedora&quot;&gt;Fedora&lt;/a&gt;, &lt;a href=&quot;https://store.docker.com/editions/enterprise/docker-ee-server-oraclelinux&quot;&gt;Oracle Linux&lt;/a&gt;, &lt;a href=&quot;https://store.docker.com/editions/enterprise/docker-ee-server-rhel&quot;&gt;RHEL&lt;/a&gt;, &lt;a href=&quot;https://store.docker.com/editions/enterprise/docker-ee-server-sles&quot;&gt;SUSE&lt;/a&gt;, and &lt;a href=&quot;https://store.docker.com/editions/community/docker-ce-server-ubuntu&quot;&gt;Ubuntu&lt;/a&gt;) or &lt;a href=&quot;https://store.docker.com/editions/enterprise/docker-ee-server-windows&quot;&gt;Windows Server&lt;/a&gt; operating systems and is based on containerd - the open source container runtime project that Docker donated to the Cloud Native Computing Foundation (CNCF) in 2017. It is available as both a free community-supported engine and as a commercially-supported enterprise engine (Docker Engine-Enterprise) that also forms the foundation for an enterprise container platform.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过官方的介绍我们不难发现，Docker 已经基本上覆盖了全平台，对于英文好的朋友，直接去官网按照指南一步一步安装即可。&lt;/p&gt;
&lt;p&gt;英文一般的朋友，继续往下看吧那就～&lt;/p&gt;</summary>
    
    
    
    <category term="前端开发" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="前端进阶" scheme="https://hi-ruofei.com/tags/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Readonly: TypeScript 实用类型 - Readonly</title>
    <link href="https://hi-ruofei.com/post/ed3ec8e0/"/>
    <id>https://hi-ruofei.com/post/ed3ec8e0/</id>
    <published>2021-06-21T16:26:18.000Z</published>
    <updated>2021-06-21T16:26:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Readonly&lt;Type&gt;</code> 可将一个类型中所有属性转换为<strong>只读</strong>属性。以 <code>User</code> 类型为例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>经 <code>Readonly&lt;Type&gt;</code> 转换后得到：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadonlyUser = Readonly&lt;User&gt;;</span><br><span class="line"><span class="keyword">const</span> readonlyUser: ReadonlyUser = &#123;</span><br><span class="line">  <span class="comment">/** `name` 属性是只读的 */</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Olive&#x27;</span>,</span><br><span class="line">  <span class="comment">/** `age` 属性是只读的 */</span></span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="comment">/** `gender` 属性是只读的 */</span></span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换后的 <code>ReadonlyUser</code> 类型与下面的类型是等价的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ReadonlyUser = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">readonly</span> age: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">readonly</span> gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Readonly&lt;Type&gt;</code> 是如何转换类型的呢？</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * Make all properties in T readonly */</span></span><br><span class="line"><span class="keyword">type</span> Readonly&lt;T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>遍历类型 <code>T</code>，将类型 <code>T</code> 中的属性作为 key；</li><li>在属性 key 前面加 <code>readonly</code> 修饰符，使其转换为只读属性；</li><li>只读属性的值为 <code>T</code> 类型中对应属性的值，即 <code>T[P]</code>。</li></ul><p><a href="https://www.typescriptlang.org/zh/play#code/C4TwDgpgBAqgzhATlAvFA3gKCjqA7AQwFsIAuKOYRASzwHMBubXAus-AVyICMkncobPABMk5SjXpMAvpkyhIUAEoQCwgPZ4ANiHhJUy1Ru0gAPHsQA+JpgDGmylERHNOi+RVrXuhMjRYBAHoAKmCoAANCEnCoQD0dQHIDQHozQCvlQG-owBC3KGDA5hwo9gByAHktagA3CAKAGlyoELDw1ggYhJSMrJyBJvIARgAOGqDQiKFRRBaktMzs2tGxKAKAMwgiAi1KmtlMQMCoQFPowFmTQB15QFg5QGqIwEFFQA7owBh-wAO1QC45COcvEwsYwFo5bd3MyOJmuLxQBPumdADbxgCNjB6hNKhBKAIAZvs8XG9fJ90oABI0AkOYJQC-CW10giXsY3L4AHT5AwFABSBFsAGsCgwgA">Playground Link</a></p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Readonly&amp;lt;Type&amp;gt;&lt;/code&gt; 可将一个类型中所有属性转换为&lt;strong&gt;只读&lt;/strong&gt;属性。以 &lt;code&gt;User&lt;/code&gt; 类型为例：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; User = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gender: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Record: TypeScript 实用类型 - Record</title>
    <link href="https://hi-ruofei.com/post/5a81d7c/"/>
    <id>https://hi-ruofei.com/post/5a81d7c/</id>
    <published>2021-06-21T16:26:18.000Z</published>
    <updated>2021-06-21T16:26:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Record&lt;Keys, Type&gt;</code> 可构造一个对象类型，其属性 key 是 key，属性值是类型。该类型可用于将一个类型的属性映射到另一个类型。</p><p>假设我们有一个 <code>User</code> 类型，如下：</p><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经 <code>Record&lt;Keys, Type&gt;</code> 转换后得到：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewUser = Record&lt;<span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span> | <span class="string">&quot;gender&quot;</span>, <span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="keyword">const</span> newUser: NewUser = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Olive&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;18&quot;</span>, <span class="comment">// 注意这里</span></span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;female&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>转换后的 <code>NewUser</code> 类型与下面的类型是等价的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">string</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最开始定义的 <code>User</code> 类型中 <code>age</code> 属性为 <code>number</code> 类型，为什么经过 <code>Record&lt;Keys, Type&gt;</code> 转换后 <code>age</code> 属性变为 <code>string</code> 类型了呢？下面根据 <code>Record&lt;Keys, Type&gt;</code> 的类型定义来分析一下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Construct a type with a set of properties K of type T</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Record&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类型定义中有一个操作符 <code>keyof</code> 和一个关键字 <code>in</code>，要理解 <code>Record&lt;Keys, Type&gt;</code> 如何工作，这两个知识点是必须要知道的。</p><ul><li><p><code>keyof</code> 操作符可以获取一个类型的所有键，返回一个这些键的联合类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">type</span> UserPropType = keyof User;</span><br></pre></td></tr></table></figure><p>上面代码中 <code>UserPropType</code> 的类型等价于下面的类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> UserPropType = <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span> | <span class="string">&#x27;gender&#x27;</span>;</span><br></pre></td></tr></table></figure><p>由上面的示例可知：<code>keyof</code> 操作符获取一个类型中所有 key，并返回这些 key 的联合类型。所以上面 <code>Record</code> 的用法还可以改写成这样：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NewUser = Record&lt;keyof User, <span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure></li><li><p><code>in</code> 是一个 <code>类型关键字</code>，可以对联合类型进行遍历，只可用在 <code>type</code> 关键字下。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> <span class="string">&#x27;name&#x27;</span> | <span class="string">&#x27;age&#x27;</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Person =&gt; &#123; name: number; age: number; &#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>知道了 <code>keyof</code> 操作符和 <code>in</code> 关键字的作用，<code>Record&lt;Keys, Type&gt;</code> 的类型定义也就清楚了：</p><ul><li>类型 <code>K</code> 继承自联合类型 <code>keyof any</code>；</li><li>通过关键字 <code>in</code> 遍历联合类型 <code>K</code>，并将遍历的结果作为 key；</li><li>key 的值是类型 <code>T</code>。</li></ul><p>现在回头看 <code>Record&lt;Keys, Type&gt;</code> 的定义是不是就理解了呢？欢迎在下方留言交流。</p><p><a href="https://www.typescriptlang.org/zh/play#code/C4TwDgpgBAqgzhATlAvFA3gKCjqA7AQwFsIAuKOYRASzwHMBubXAus-AVyICMkncobPABMk5SjXpMAvpjmhIUAHIQA7vCSooAJQgBjAPaJhAHgDWEEAYBmsBIgA0FKrToA+JpkN5K+NRsRyFXV7LSwcQhJyACIAeQAbagA3CGiHZlZ2aIBGAA40qAB6QqhAC5tAeENATfjAGcTmIVFAqGjrCCICeNT06QYgA">Playground Link</a></p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Record&amp;lt;Keys, Type&amp;gt;&lt;/code&gt; 可构造一个对象类型，其属性 key 是 key，属性值是类型。该类型可用于将一个类型的属性映射到另一个类型。&lt;/p&gt;
&lt;p&gt;假设我们有一个 &lt;code&gt;User&lt;/code&gt; 类型，如下：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Required: TypeScript 实用类型 - Required</title>
    <link href="https://hi-ruofei.com/post/64ba61b9/"/>
    <id>https://hi-ruofei.com/post/64ba61b9/</id>
    <published>2021-06-20T16:34:04.000Z</published>
    <updated>2021-06-20T16:34:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Required&lt;Type&gt;</code> 类型与 <code>[Partial&lt;Type&gt;](#Partial-lt-Type-gt)</code> 类型的作用相反，<code>Required&lt;Type&gt;</code> 可将一个类型中的可选属性转换为必选属性。以 <code>User</code> 类型为例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><p><code>User</code> 类型中的 <code>age</code> 属性是可选属性，当经过 <code>Required&lt;Type&gt;</code> 转换后，该属性会被转换成必选属性：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> RequiredUser = Required&lt;User&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requiredUser: RequiredUser = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Olive&quot;</span>,</span><br><span class="line">  <span class="comment">/** `age` 属性由可选转成了必选 */</span></span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;female&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>下面是 <code>Required&lt;Type&gt;</code> 的源码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T required</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Required&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]-?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意到属性后的 <code>-?</code> 了吗？意思是：去除该属性的可选属性，使其转换为必选的属性。</p><p><a href="https://www.typescriptlang.org/zh/play?ssl=16&ssc=3&pln=7&pc=1#code/C4TwDgpgBAqgzhATlAvFA3gKCjqA7AQwFsIAuKOYRASzwHMBubXAus-AVyICMkncobPABMk5SjXpMAvpkyhIUAEoQAjh2qIIw+ElTK1GrcIA8uxAD4mmAMYB7PJShb1m7efIrXx8-qwCAegAqIKgAA0ISMKhAPR1AcgNAejNAUf1ASATAELcoIIDmHEj2AHIAeQAbagA3CHyAGhyoYNCw1gho+OT0zOyBJvIARgAOGsCQ8KFRRBbE1Iys2tGxKHyAMwgiAmLKzGkGIA">Playground Link</a></p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Required&amp;lt;Type&amp;gt;&lt;/code&gt; 类型与 &lt;code&gt;[Partial&amp;lt;Type&amp;gt;](#Partial-lt-Type-gt)&lt;/code&gt; 类型的作用相反，&lt;code&gt;Required&amp;lt;Type&amp;gt;&lt;/code&gt; 可将一个类型中的可选属性转换为必选属性。以 &lt;code&gt;User&lt;/code&gt; 类型为例：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; User = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age?: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gender: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript Utility Types - Partial: TypeScript 实用类型 - Partial</title>
    <link href="https://hi-ruofei.com/post/d31a997b/"/>
    <id>https://hi-ruofei.com/post/d31a997b/</id>
    <published>2021-06-20T01:52:51.000Z</published>
    <updated>2021-06-20T01:52:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Partial&lt;Type&gt;</code> 可将一个类型中所有属性转换为可选属性。假设我们有一个 <code>user</code> 的类型，如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">  gender: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>经 <code>Partial&lt;Type&gt;</code> 转换后得到：</p><span id="more"></span><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PartialUser = Partial&lt;User&gt;;</span><br><span class="line"><span class="keyword">const</span> partialUser: PartialUser = &#123;</span><br><span class="line">  <span class="comment">/** `name` 属性是可选的 */</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Olive&quot;</span>,</span><br><span class="line">  <span class="comment">/** `age` 属性是可选的 */</span></span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="comment">/** `gender` 属性是可选的 */</span></span><br><span class="line">  <span class="attr">gender</span>: <span class="string">&quot;female&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>转换后的 <code>PartialUser</code> 类型与下面的类型是等价的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PartialUser = &#123;</span><br><span class="line">  name?: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">  age?: <span class="built_in">number</span> | <span class="literal">undefined</span>;</span><br><span class="line">  gender?: <span class="built_in">string</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么 <code>Partial&lt;Type&gt;</code> 是如何转换类型的呢？下面是它的源码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Make all properties in T optional</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>遍历类型 <code>T</code>，将类型 <code>T</code> 中的属性作为 key；</li><li>在属性后面加 <code>?</code> 使其变为可选的属性；</li><li>可选属性的值为 <code>T</code> 类型中对应属性的值，即 <code>T[P]</code>。</li></ul><p><a href="https://www.typescriptlang.org/zh/play#code/C4TwDgpgBAqgzhATlAvFA3gKCjqA7AQwFsIAuKOYRASzwHMBubXAus-AVyICMkncobPABMk5SjXpMAvpkyhIUAAoFEwagQA28JKmWr1WgDw7EAPiaYAxgHs8lKGAMbtCRORVqXpvVgEB6ACpAqAADQhJQqEA9HUByA0B6M0B75UBIBMAQtyhA-2YcCPYAcgB5TWoANwg8gBpsqCCQ0NYIKLiktIysgQbyAEYADiqA4LChUUQmhJT0zOrhsSg8gDMIIi1yqukgA">Playground Link</a></p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Partial&amp;lt;Type&amp;gt;&lt;/code&gt; 可将一个类型中所有属性转换为可选属性。假设我们有一个 &lt;code&gt;user&lt;/code&gt; 的类型，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; User = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  age: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  gender: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;经 &lt;code&gt;Partial&amp;lt;Type&amp;gt;&lt;/code&gt; 转换后得到：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="TypeScript" scheme="https://hi-ruofei.com/tags/TypeScript/"/>
    
    <category term="TypeScript:Utility Types" scheme="https://hi-ruofei.com/tags/TypeScript-Utility-Types/"/>
    
    <category term="TypeScript:实用类型" scheme="https://hi-ruofei.com/tags/TypeScript-%E5%AE%9E%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>（JS）Chrome 下载 PDF 文件：（JS）解决 Chrome 浏览器下载 PDF 而不是预览 PDF</title>
    <link href="https://hi-ruofei.com/post/29e80bac/"/>
    <id>https://hi-ruofei.com/post/29e80bac/</id>
    <published>2021-06-20T01:35:17.000Z</published>
    <updated>2021-06-20T01:35:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在前端开发中遇到这样一个问题：在 Chrome 中通过一个链接下载 PDF 文件时却被 Chrome 浏览器打开预览了，这不是我想要的效果，点击 PDF 链接的时候我希望下载这个文件而不是去预览。这里提供一个解决方案，将 PDF 文件通过 <code>XMLHttpRequest</code> 请求的方式，将文件转换为文件流，然后实现下载 PDF 的功能。</p><span id="more"></span><p>具体 JS 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description </span>文件链接转文件流下载（主要针对 pdf - 解决谷歌浏览器 a 标签下直接打开 pdf 的问题）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>url 文件链接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>fileName 文件名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>type 文件类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fileLink2StreamDownload = <span class="function">(<span class="params">&#123; url, fileName, type &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> reg =</span><br><span class="line">    <span class="regexp">/^([hH][tT]&#123;2&#125;[pP]:\/\/|[hH][tT]&#123;2&#125;[pP][sS]:\/\/)(([A-Za-z0-9-~]+).)+([A-Za-z0-9-~\/])+$/</span>;</span><br><span class="line">  <span class="keyword">if</span> (!reg.test(url))</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;传入参数不合法，`url` 不是标准的文件链接&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  <span class="comment">// 规定请求的类型、URL 以及是否异步处理请求。</span></span><br><span class="line">  <span class="comment">//   三个参数分别是</span></span><br><span class="line">  <span class="comment">//     - method：请求的类型（GET 或 POST ）</span></span><br><span class="line">  <span class="comment">//     - url：文件在服务器上的位置</span></span><br><span class="line">  <span class="comment">//     - async：true（异步）或 false（同步）</span></span><br><span class="line">  xhr.open(<span class="string">&quot;get&quot;</span>, url, <span class="literal">true</span>);</span><br><span class="line">  xhr.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">`application/<span class="subst">$&#123;type&#125;</span>`</span>);</span><br><span class="line">  xhr.responseType = <span class="string">&quot;blob&quot;</span>;</span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.status === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([<span class="built_in">this</span>.response], &#123; <span class="attr">type</span>: <span class="string">`application/<span class="subst">$&#123;type&#125;</span>`</span> &#125;);</span><br><span class="line">      <span class="keyword">const</span> objectUrl = URL.createObjectURL(blob);</span><br><span class="line">      <span class="keyword">const</span> ele = <span class="built_in">document</span>.createElement(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">      ele.href = objectUrl;</span><br><span class="line">      ele.download = fileName;</span><br><span class="line">      ele.click();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>fileLink2StreamDownload</code> 方法内部通过 <code>XMLHttpRequest</code> 发起一个 GET 请求，设置请求的响应类型为 <code>blob</code>，然后在页面上创建一个隐藏的 <code>a</code> 标签，然后点击一下这个 <code>a</code> 标签，实现 PDF 的下载功能。这里的关键是将文件链接转换为 <code>blob</code> 文件流来实现下载 PDF。如果 PDF 的链接有权限验证的话，可以用你项目中封装好的 <code>request</code> 方法代替上面的 <code>XMLHttpRequest</code> 方法。</p><p>上面的方法是经过项目验证过的，你可以放心大胆的 copy 过去，根据你的项目略作修改就能用了！甚至都不用改就可以。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;在前端开发中遇到这样一个问题：在 Chrome 中通过一个链接下载 PDF 文件时却被 Chrome 浏览器打开预览了，这不是我想要的效果，点击 PDF 链接的时候我希望下载这个文件而不是去预览。这里提供一个解决方案，将 PDF 文件通过 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 请求的方式，将文件转换为文件流，然后实现下载 PDF 的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="QA" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/QA/"/>
    
    
    <category term="JavaScript" scheme="https://hi-ruofei.com/tags/JavaScript/"/>
    
    <category term="Chrome" scheme="https://hi-ruofei.com/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Cloudflare 转发 GitHub Gist</title>
    <link href="https://hi-ruofei.com/post/3b43b1e4/"/>
    <id>https://hi-ruofei.com/post/3b43b1e4/</id>
    <published>2021-05-23T01:05:51.000Z</published>
    <updated>2021-05-23T01:05:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录了如何在 MediaWiki 中插入 GitHub Gist 代码片段。</p><span id="more"></span><h2 id="编写-MediaWiki-扩展-gists-php"><a href="#编写-MediaWiki-扩展-gists-php" class="headerlink" title="编写 MediaWiki 扩展 gists.php"></a>编写 MediaWiki 扩展 gists.php</h2><p>首先编写一个 MediaWiki 扩展，文件命名为 <code>gists.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Extension for MediaWiki to include GitHub Gists in pages.</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2021 若非 &lt;rf.wangchn<span class="doctag">@foxmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ingroup</span> Extensions</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 若非 &lt;rf.wangchn<span class="doctag">@foxmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$wgExtensionCredits</span>[<span class="string">&#x27;gists&#x27;</span>][] = <span class="keyword">array</span>(</span><br><span class="line">  <span class="string">&#x27;path&#x27;</span> =&gt; <span class="keyword">__FILE__</span>,</span><br><span class="line">  <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Gists&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;author&#x27;</span> =&gt; <span class="string">&#x27;若非&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;url&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;description&#x27;</span> =&gt; <span class="string">&#x27;在你的 MediaWiki 中插入 GitHub Gist 代码片段。&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;version&#x27;</span> =&gt; <span class="number">1.0</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$wgHooks</span>[<span class="string">&#x27;ParserFirstCallInit&#x27;</span>][] = <span class="string">&#x27;mvGists&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add the &lt;gist&gt; tag to the parser.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Parser $parser Parser object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> bool true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mvGists</span>(<span class="params"> Parser <span class="variable">$parser</span> </span>) </span>&#123;</span><br><span class="line">  <span class="variable">$parser</span>-&gt;setHook( <span class="string">&#x27;gist&#x27;</span>, <span class="string">&#x27;mvGistRender&#x27;</span> );</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Parses $input (gist number) and embeds gist code.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $input Contents of tag</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $args Attributes to the tag</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Parser $parser Parser object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> PPFrame $frame Current parser grame</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mvGistRender</span>(<span class="params"> <span class="variable">$input</span>, <span class="keyword">array</span> <span class="variable">$args</span>, Parser <span class="variable">$parser</span>, PPFrame <span class="variable">$frame</span> </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( !<span class="keyword">empty</span>( <span class="variable">$args</span>[<span class="string">&#x27;files&#x27;</span>] ) ) &#123;</span><br><span class="line">    <span class="variable">$files</span> = explode( <span class="string">&#x27; &#x27;</span>, <span class="variable">$args</span>[<span class="string">&#x27;files&#x27;</span>] );</span><br><span class="line">  &#125; <span class="keyword">elseif</span>( !<span class="keyword">empty</span>( <span class="variable">$args</span>[<span class="string">&#x27;file&#x27;</span>] ) ) &#123;</span><br><span class="line">    <span class="variable">$files</span> = <span class="keyword">array</span>( <span class="variable">$args</span>[<span class="string">&#x27;file&#x27;</span>] );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$files</span> = <span class="keyword">array</span>( <span class="string">&#x27;&#x27;</span> );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>( !ctype_xdigit( <span class="variable">$input</span> ) ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;!!! Invalid gist number&#x27;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$gistId</span> = trim( <span class="variable">$input</span> );</span><br><span class="line">    <span class="variable">$output</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">foreach</span>( <span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span> ) &#123;</span><br><span class="line">      <span class="comment">// 代理了 GitHub Gist</span></span><br><span class="line">      <span class="comment">// see: https://dash.cloudflare.com/a85714920ae16e02e952fe71641d9a70/workers/view/gist</span></span><br><span class="line">      <span class="variable">$output</span> .= Html::linkedScript( <span class="string">&quot;https://gist.icoder.workers.dev/<span class="subst">&#123;$input&#125;</span>.js?file=<span class="subst">&#123;$file&#125;</span>&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建完成后，将该扩展文件放到 MediaWiki 站点根目录的 <code>extensions/gists/</code> 目录下。</p><p>在中国大陆无法访问 <a href="https://gist.github.com/">https://gist.github.com/（点我试一下你能访问吗？）</a>，借助 <a href="https://dash.cloudflare.com/">Cloudflare</a> 可以将其转发到其他域名下，这样就可以访问 <a href="https://gist.github.com/">https://gist.github.com/</a> 了。</p><h2 id="创建-Worker"><a href="#创建-Worker" class="headerlink" title="创建 Worker"></a>创建 Worker</h2><p>在 Cloudflare 中创建一个 worker，内容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(<span class="string">&quot;fetch&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> url = event.request.url.split(<span class="string">&quot;https://gist.icoder.workers.dev/&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">return</span> event.respondWith(fetch(<span class="string">`https://gist.github.com/<span class="subst">$&#123;url&#125;</span>`</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>代码中第 2 行是 Cloudflare 提供的 worker.dev 路由，部署后通过该地址即可访问 Github Gist 中的代码片段。不要开启你本地的 vpn，访问一下这个地址试一下：<a href="https://gist.icoder.workers.dev/smpower/4814c681a44629f43b2f8455c436f669">https://gist.icoder.workers.dev/smpower/4814c681a44629f43b2f8455c436f669</a>。通过这个地址打开的页面就包含了上面的两个代码片段。</p><h2 id="启用-gists-扩展"><a href="#启用-gists-扩展" class="headerlink" title="启用 gists 扩展"></a>启用 gists 扩展</h2><p>在 MediaWiki 的配置文件 <code>LocalSettings.php</code> 中启用该扩展：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略了其他配置项...</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;<span class="subst">$IP</span>/extensions/gists/gists.php&quot;</span>;</span><br></pre></td></tr></table></figure><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文记录了如何在 MediaWiki 中插入 GitHub Gist 代码片段。&lt;/p&gt;</summary>
    
    
    
    <category term="MediaWiki" scheme="https://hi-ruofei.com/categories/MediaWiki/"/>
    
    
    <category term="Extensions" scheme="https://hi-ruofei.com/tags/Extensions/"/>
    
    <category term="扩展" scheme="https://hi-ruofei.com/tags/%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>记一次博客优化</title>
    <link href="https://hi-ruofei.com/post/a90b7ddb/"/>
    <id>https://hi-ruofei.com/post/a90b7ddb/</id>
    <published>2021-05-21T00:00:00.000Z</published>
    <updated>2021-05-21T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前，使用 Netlify 做全球加速，以提高访问速度。后来效果不是很明显，切换到了 Vercel，加速效果很好，结果前几天网站突然就不能在国内访问了～排查了一下发现需要科学上网才能正常访问，抽时间又把网站托管到 GitHub Pages 上了。</p><span id="more"></span><p>虽然能访问 GitHub Pages 页面，但是在国内访问的速度慢到让你怀疑人生。都已经要狠心买 CDN 了，突然想到了 jsDelivr——这货是为开发者提供的开源免费的 CDN，许多 npm 包都是通过 jsDelivr 来加速的，还有 GitHub 仓库也能加速访问。</p><p>用户在访问托管到 GitHub Pages 上的页面时，需要加载许多静态资源，像一些 js、css 和图像都是从 GitHub 仓库中加载的，如果把这部分资源使用 jsDelivr 加速的话，网站的访问速度就快的多了，这样用户只需要从 GitHub Pages 加载 html 文件，其他资源统统走 jsDelivr，就能解决访问慢的问题。</p><p>本站使用 Hexo + NexT 主题搭建，要在 NexT 主题下配置 jsDelivr 也非常简单——改一下配置文件就能实现。不过在修改配置文件之前，还是先看看 NexT 是怎么引入静态资源的吧。</p><p>打开项目的 <code>node_modules</code> 文件夹，找到 Next 主题 <code>hexo-theme-next</code> 文件夹。这个文件夹就是用到的主题，在主题文件夹下找到 <code>layout</code> -&gt; <code>_partials</code> -&gt; <code>head</code> 文件夹下的 <code>head.njk</code> 文件，打开。</p><p>这个文件就是 HTML 文件中的 head 部分，所有的 js 和 css 资源都是在这个文件中引入的。看看其中有没有关于主题的样式，像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;&#123;&#123; url_for(theme.css) &#125;&#125;/main.css&quot;&gt;</span><br></pre></td></tr></table></figure><p>很显然，这个 main.css 样式文件的路径是在配置文件中配置的，找一下配置文件中的 css 属性，你会看到这样一段代码（通常在配置文件的最后位置）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Assets</span></span><br><span class="line"><span class="comment"># Accelerate delivery of static files using a CDN</span></span><br><span class="line"><span class="attr">css:</span> <span class="string">css</span></span><br><span class="line"><span class="attr">js:</span> <span class="string">js</span></span><br><span class="line"><span class="attr">images:</span> <span class="string">images</span></span><br></pre></td></tr></table></figure><p>结合上面引入 css 的路径，就明白了：main.css 文件是在根目录下的 css 文件夹下引入的。所以，我们只需要把配置文件中的 css、js 和 images 属性值设置为 jsDelivr 提供的地址就可以了。</p><p>以下面我的配置为例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Assets</span></span><br><span class="line"><span class="comment"># Accelerate delivery of static files using a CDN</span></span><br><span class="line"><span class="attr">css:</span> <span class="string">https://cdn.jsdelivr.net/gh/smpower/smpower.github.io/css</span> <span class="comment"># css</span></span><br><span class="line"><span class="attr">js:</span> <span class="string">https://cdn.jsdelivr.net/gh/smpower/smpower.github.io/js</span> <span class="comment"># js</span></span><br><span class="line"><span class="attr">images:</span> <span class="string">https://cdn.jsdelivr.net/gh/smpower/smpower.github.io/images</span> <span class="comment"># images</span></span><br></pre></td></tr></table></figure><p>打开本站的控制台，刷新一下页面你会发现所有的静态资源都是从上面的 cdn 中加载的，并且访问速度相当给力，整个页面的加载用时在 3s 以内，这速度简直完爆 GitHub Pages。</p><p>还在等什么，在你的网站上也搞一哈吧！Happy Coding！</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前，使用 Netlify 做全球加速，以提高访问速度。后来效果不是很明显，切换到了 Vercel，加速效果很好，结果前几天网站突然就不能在国内访问了～排查了一下发现需要科学上网才能正常访问，抽时间又把网站托管到 GitHub Pages 上了。&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://hi-ruofei.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="Hexo" scheme="https://hi-ruofei.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>在 Mac 上使用 gitolite 搭建 Git 服务器</title>
    <link href="https://hi-ruofei.com/post/952aa112/"/>
    <id>https://hi-ruofei.com/post/952aa112/</id>
    <published>2021-03-26T18:21:48.000Z</published>
    <updated>2021-05-26T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>使用 gitolite 搭建本地 git 服务</li><li>通过 iCloud 同步仓库</li></ul><h2 id="准备-ssh-key"><a href="#准备-ssh-key" class="headerlink" title="准备 ssh key"></a>准备 ssh key</h2><p>使用 <code>ssh-keygen</code> 命令生成 ssh key：</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/&lt;username&gt;/.ssh/id_rsa):</span><br><span class="line">Created directory <span class="string">&#x27;/Users/ruofei/.ssh&#x27;</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /Users/&lt;username&gt;/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /Users/&lt;username&gt;/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:Q80nJRy3c+QEW8Sr1...j63sm3mXw &lt;username&gt;@mbp.local</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 4096]----+</span></span><br><span class="line"><span class="string">|     ..o .o.+=B+.|</span></span><br><span class="line"><span class="string">|     .. oo.+ B+ o|</span></span><br><span class="line"><span class="string">|.    ..  ..      |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>默认会在 <code>/Users/&lt;username&gt;/.ssh/</code> 目录下随机生成 ssh key，建议输入一个密码。</p><h2 id="允许远程登录-MacBook"><a href="#允许远程登录-MacBook" class="headerlink" title="允许远程登录 MacBook"></a>允许远程登录 MacBook</h2><p>打开 <code>系统偏好设置</code> -&gt; <code>共享</code>，勾选 <code>远程登录</code>：</p><p><img src="https://gitee.com/smpower/oss/raw/master/hi-ruofei.com/knM4zu.png" alt="远程登录"></p><h2 id="使用-iCloud-同步裸仓库"><a href="#使用-iCloud-同步裸仓库" class="headerlink" title="使用 iCloud 同步裸仓库"></a>使用 iCloud 同步裸仓库</h2><p>因 gitolite 服务器部署在本地，所以当我们重装系统时，一般会将 gitolite 服务的裸仓库都做一次备份。方便起见，这里使用 iCloud 同步我们的裸仓库。</p><p>在 iCloud 中创建一个名为 <code>repositories</code> 的文件夹，打开终端，cd 到 iCloud 根目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /Users/&lt;username&gt;/Library/Mobile\ Documents/com~apple~CloudDocs/</span><br></pre></td></tr></table></figure><p>创建 <code>repositories</code> 目录的软连接到当前登录用户的家目录下的 <code>repositories</code> 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ln -s /Users/&lt;username&gt;/Library/Mobile\ Documents/com\~apple\~CloudDocs/repositories/ /Users/git/repositories</span><br></pre></td></tr></table></figure><p>下面测试一下 iCloud 的同步功能是否正常。cd 到 <code>/Users/git/repositories</code> 目录下，创建一个名为 <code>test</code> 的测试文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /Users/&lt;username&gt;/repositories &amp;&amp; touch <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>接下来，打开 iCloud 中的 <code>repositories</code> 文件夹，如果能看到我们刚才创建的这个 <code>test</code> 文件，就说明 iCloud 的同步功能是正常的。</p><div class="tabs" id="测试-icloud-同步功能是否正常"><ul class="nav-tabs"><li class="tab active"><a href="#测试-icloud-同步功能是否正常-1">/Users/git/repositories/ 目录下的内容</a></li><li class="tab"><a href="#测试-icloud-同步功能是否正常-2">iCloud 中 repositories 目录下的内容</a></li></ul><div class="tab-content"><div class="tab-pane active" id="测试-icloud-同步功能是否正常-1"><p><img src="https://gitee.com/smpower/oss/raw/master/hi-ruofei.com/fozuqm.png"></p></div><div class="tab-pane" id="测试-icloud-同步功能是否正常-2"><p><img src="https://gitee.com/smpower/oss/raw/master/hi-ruofei.com/8gIbvw.jpg"></p></div></div></div><h2 id="安装、配置-gitolite"><a href="#安装、配置-gitolite" class="headerlink" title="安装、配置 gitolite"></a>安装、配置 gitolite</h2><p>首先，克隆 gitolite 的源码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/sitaramc/gitolite</span><br><span class="line"><span class="comment"># 如果克隆 github 上的仓库失败，可以通过国内镜像仓库克隆，速度快很多</span></span><br><span class="line"><span class="comment"># git clone https://gitee.com/mirrors/gitolite.git</span></span><br></pre></td></tr></table></figure><p>克隆源码后建立 gitolite 软连接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/bin</span><br><span class="line">$ gitolite/install -ln /Users/&lt;username&gt;/bin <span class="comment"># 需使用绝对路径</span></span><br></pre></td></tr></table></figure><p>再将 <code>gitolite</code> 追加到 <code>.bash_profile</code> 中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/Users/&lt;username&gt;/bin:<span class="variable">$PATH</span> <span class="comment"># 如果用 zsh 那就将这句话添加到 .bashrc 文件，注意将 &lt;username&gt; 替换成你的用户名</span></span><br></pre></td></tr></table></figure><p>最后设置管理员用户共钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gitolite setup -pk YourName.pub <span class="comment"># 这里的 YourName.pub 就是之前生成的共钥（ssh key），通常叫做 id_rsa.pub</span></span><br></pre></td></tr></table></figure><p>上面的命令执行成功之后，会在 iCloud 的 <code>repositories</code> 目录下创建两个仓库：</p><ul><li><code>gitolite-admin.git</code>：这是管理员仓库，添加人员、权限等操作需要将这个仓库克隆下来在其冲的 config 中配置。</li><li><code>testing.git</code>：这个是一个测试仓库。</li></ul><p><img src="https://gitee.com/smpower/oss/raw/master/hi-ruofei.com/2xkXB3.png" alt="初始化的两个仓库"></p><p>之后我们提交的代码都会同步到 iCloud。</p><p>因为我们是在本地搭建的 gitolite，所以还要在当前管理员用户的 <code>.ssh</code> 目录下创建一个配置文件 config：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.ssh/config</span><br></pre></td></tr></table></figure><p>config 文件中填写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host <span class="built_in">local</span> <span class="comment"># local 就表示本机（127.0.0.1）</span></span><br><span class="line">    HostName 127.0.0.1</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>将 <code>gitolite-admin.git</code> 仓库克隆下来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;username&gt;@<span class="built_in">local</span>:gitolite-admin.git <span class="comment"># &lt;username&gt; 是你的用户名</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/smpower/oss/raw/master/hi-ruofei.com/fHnR56.png" alt="克隆 gitolite-adming.git 仓库"></p><p>用编辑器打开 <code>gitolite-admin</code> 仓库，修改其中的 <code>gitolite.conf</code> 文件：</p><p><img src="https://gitee.com/smpower/oss/raw/master/hi-ruofei.com/ZEeaGy.png" alt="修改 gitolite.conf 文件"></p><p>图中新加的名为 <code>hi-ruofei.com</code> 仓库名就是本站的源码仓库。</p><p>修改之后，提交到 gitolite，gitolite 会自动帮我们创建一个名为 <code>hi-ruofei.com</code> 的裸仓库，该仓库会同步到 iCloud 上。</p><p><img src="https://gitee.com/smpower/oss/raw/master/hi-ruofei.com/x51QfE.png" alt="自动创建 hi-ruofei.com 裸仓库"></p><p><img src="https://gitee.com/smpower/oss/raw/master/hi-ruofei.com/vY8mFa.png" alt="保存在 iCloud 上的裸仓库"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://gitolite.com/">Gitolite</a></li><li><a href="https://blog.csdn.net/a464057216/article/details/52644021">45.在 Mac 上使用 gitolite 搭建 Git 服务器</a></li></ul><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用 gitolite 搭建本地 git 服务&lt;/li&gt;
&lt;li&gt;通过 iCloud 同步仓库&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;准备-ssh-key&quot;&gt;&lt;a href=&quot;#准备-ssh-key&quot; class=&quot;headerlink&quot; title=&quot;准备 ssh key&quot;&gt;&lt;/a&gt;准备 ssh key&lt;/h2&gt;&lt;p&gt;使用 &lt;code&gt;ssh-keygen&lt;/code&gt; 命令生成 ssh key：&lt;/p&gt;</summary>
    
    
    
    <category term="Git" scheme="https://hi-ruofei.com/categories/Git/"/>
    
    
    <category term="gitolite" scheme="https://hi-ruofei.com/tags/gitolite/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 之检测数组</title>
    <link href="https://hi-ruofei.com/post/834f359e/"/>
    <id>https://hi-ruofei.com/post/834f359e/</id>
    <published>2021-03-24T22:47:50.000Z</published>
    <updated>2021-03-24T22:47:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>要判断一个对象是不是数组，ECMAScript 提供了 2 种检测方式，他们分别是：</p><ul><li><code>instanceof</code> 操作符</li><li><code>Array.isArray()</code> 方法</li></ul><span id="more"></span><p>在只有一个全局作用域的情况下，使用 <code>instanceof</code> 操作符即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span><br><span class="line">  <span class="comment">// 操作数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>instanceof</code> 的问题是假设只有一个全局上下文。如果网页中有多个框架，则可能存在两个以上全局执行上下文，因此可能会有多个不同的 <code>Array</code> 构造函数。当从一个框架中将数组传递给另外一个框架时，则这个数组的构造函数将有别于第二个框架中的数组。</p><p>为了解决这个问题，ECMAScript 提供了 <code>Array.isArray()</code> 方法。这个方法的作用就是确定一个值是否为数组，而不用管它是在哪个全局上下文中创建的。下面是一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">  <span class="comment">// 操作数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;要判断一个对象是不是数组，ECMAScript 提供了 2 种检测方式，他们分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;instanceof&lt;/code&gt; 操作符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Array.isArray()&lt;/code&gt; 方法&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://hi-ruofei.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript 语法" scheme="https://hi-ruofei.com/tags/JavaScript-%E8%AF%AD%E6%B3%95/"/>
    
    <category term="JavaScript 集合引用类型" scheme="https://hi-ruofei.com/tags/JavaScript-%E9%9B%86%E5%90%88%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
    <category term="JavaScript Array" scheme="https://hi-ruofei.com/tags/JavaScript-Array/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 之 Array 中的迭代器方法</title>
    <link href="https://hi-ruofei.com/post/56796ee0/"/>
    <id>https://hi-ruofei.com/post/56796ee0/</id>
    <published>2021-03-23T00:15:02.000Z</published>
    <updated>2021-03-23T00:15:02.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>Array</code> 的原型上暴露了 3 个用于检索数组内容的迭代器方法：<code>keys()</code>、<code>values()</code> 和 <code>entries()</code>。</p><ul><li><code>keys()</code>：返回数组索引的迭代器。</li><li><code>values()</code>：返回数组元素的迭代器。</li><li><code>entries()</code>：返回索引/值对的迭代器。</li></ul><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> strings = [<span class="string">&quot;hi-ruofei.com&quot;</span>, <span class="string">&quot;https://hi-ruofei.com&quot;</span>, <span class="string">&quot;Hello world&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为这些方法返回的都是迭代器，所以可以将他们的内容</span></span><br><span class="line"><span class="comment">// 通过 Array.from() 直接转换为数组实例</span></span><br><span class="line"><span class="keyword">const</span> keys = <span class="built_in">Array</span>.from(strings.keys());</span><br><span class="line"><span class="keyword">const</span> values = <span class="built_in">Array</span>.from(strings.values());</span><br><span class="line"><span class="keyword">const</span> entries = <span class="built_in">Array</span>.from(strings.entries());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(keys); <span class="comment">// [0, 1, 2]</span></span><br><span class="line"><span class="built_in">console</span>.log(values); <span class="comment">// [&#x27;hi-ruofei.com&#x27;, &#x27;https://hi-ruofei.com&#x27;, &#x27;Hello world.&#x27;];</span></span><br><span class="line"><span class="built_in">console</span>.log(entries); <span class="comment">// [[0, &#x27;hi-ruofei.com&#x27;], [1, &#x27;https://hi-ruofei.com&#x27;], [2, &#x27;Hello world&#x27;]]</span></span><br></pre></td></tr></table></figure><p>使用 ES6 的解构可以非常容易地在循环中拆分键/值对：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> strings = [<span class="string">&quot;hi-ruofei.com&quot;</span>, <span class="string">&quot;https://hi-ruofei.com&quot;</span>, <span class="string">&quot;Hello world&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> entries = <span class="built_in">Array</span>.from(strings.entries());</span><br><span class="line"><span class="keyword">const</span> result = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> [idx, element] <span class="keyword">of</span> entries) &#123;</span><br><span class="line">  result[element] = &#123; idx &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * result:</span></span><br><span class="line"><span class="comment"> * &#123;</span></span><br><span class="line"><span class="comment"> *   &#x27;hi-ruofei.com&#x27;: &#123; idx: 0 &#125;,</span></span><br><span class="line"><span class="comment"> *   &#x27;https://hi-ruofei.com&#x27;: &#123; idx: 0 &#125;,</span></span><br><span class="line"><span class="comment"> *   &#x27;Hello world&#x27;: &#123; idx: 0 &#125;,</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Array&lt;/code&gt; 的原型上暴露了 3 个用于检索数组内容的迭代器方法：&lt;code&gt;keys()&lt;/code&gt;、&lt;code&gt;values()&lt;/code&gt; 和 &lt;code&gt;entries()&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;keys()&lt;/code&gt;：返回数组索引的迭代器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;values()&lt;/code&gt;：返回数组元素的迭代器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;entries()&lt;/code&gt;：返回索引/值对的迭代器。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://hi-ruofei.com/categories/JavaScript/"/>
    
    
    <category term="JavaScript 语法" scheme="https://hi-ruofei.com/tags/JavaScript-%E8%AF%AD%E6%B3%95/"/>
    
    <category term="JavaScript 集合引用类型" scheme="https://hi-ruofei.com/tags/JavaScript-%E9%9B%86%E5%90%88%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/"/>
    
    <category term="JavaScript Array" scheme="https://hi-ruofei.com/tags/JavaScript-Array/"/>
    
  </entry>
  
  <entry>
    <title>前端:使用 Mock Service Worker 模拟数据</title>
    <link href="https://hi-ruofei.com/post/c62eb287/"/>
    <id>https://hi-ruofei.com/post/c62eb287/</id>
    <published>2021-02-26T16:26:32.000Z</published>
    <updated>2021-02-26T16:26:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在项目根目录执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install msw --save-dev</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ yarn add msw --dev</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="定义-mocks（模拟-REST-API）"><a href="#定义-mocks（模拟-REST-API）" class="headerlink" title="定义 mocks（模拟 REST API）"></a>定义 mocks（模拟 REST API）</h2><p>使用 request handler 来定义要模拟的请求。</p><ol><li><p>创建 <code>src/mocks</code> 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir src/mocks</span><br></pre></td></tr></table></figure></li><li><p>创建 <code>src/mocks/handler.js</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch src/mocks/handlers.js</span><br></pre></td></tr></table></figure></li><li><p>从 <code>msw</code> 导入 <code>rest</code> :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/mocks/handlers.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; rest &#125; <span class="keyword">from</span> <span class="string">&quot;msw&quot;</span>;</span><br></pre></td></tr></table></figure></li></ol><p>以下面两个 API 为例：</p><ul><li><code>POST /login</code>，允许用户登录。</li><li><code>GET /user</code>，返回登录用户的信息。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/mocks/handlers.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; rest &#125; <span class="keyword">from</span> <span class="string">&quot;msw&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> handlers = [</span><br><span class="line">  <span class="comment">// Handles a POST /login request</span></span><br><span class="line">  rest.post(<span class="string">&quot;/login&quot;</span>, <span class="literal">null</span>),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Handles a GET /user request</span></span><br><span class="line">  rest.get(<span class="string">&quot;/user&quot;</span>, <span class="literal">null</span>),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>要模拟返回值，需要在对应的 <code>post</code> 或 <code>get</code> 方法中传入 response resolver。response resolver 函数接受 3 个参数：</p><ul><li><code>req</code>：匹配的请求信息。</li><li><code>res</code>：用于模拟返回值的方法集。</li><li><code>ctx</code>：设置 <code>status code</code>、<code>headers</code>、<code>body</code>等。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/mocks/handlers.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; rest &#125; <span class="keyword">from</span> <span class="string">&quot;msw&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> handlers = [</span><br><span class="line">  rest.post(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Persist user&#x27;s authentication in the session</span></span><br><span class="line">    sessionStorage.setItem(<span class="string">&quot;is-authenticated&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res(</span><br><span class="line">      <span class="comment">// Respond with a 200 status code</span></span><br><span class="line">      ctx.status(<span class="number">200</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  rest.get(<span class="string">&quot;/user&quot;</span>, <span class="function">(<span class="params">req, res, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Check if the user is authenticated in this session</span></span><br><span class="line">    <span class="keyword">const</span> isAuthenticated = sessionStorage.getItem(<span class="string">&quot;is-authenticated&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isAuthenticated) &#123;</span><br><span class="line">      <span class="comment">// If not authenticated, respond with a 403 error</span></span><br><span class="line">      <span class="keyword">return</span> res(</span><br><span class="line">        ctx.status(<span class="number">403</span>),</span><br><span class="line">        ctx.json(&#123;</span><br><span class="line">          <span class="attr">errorMessage</span>: <span class="string">&quot;Not authorized&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If authenticated, return a mocked user details</span></span><br><span class="line">    <span class="keyword">return</span> res(</span><br><span class="line">      ctx.status(<span class="number">200</span>),</span><br><span class="line">      ctx.json(&#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125;),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>上面的 <code>src/mocks/handlers.js</code> 文件在 Browser 和 Node 环境是通用的。因为 Service Worder 不支持在 Node 中运行，所以集成过程因环境而异。</p><h3 id="集成到-Browser-环境"><a href="#集成到-Browser-环境" class="headerlink" title="集成到 Browser 环境"></a>集成到 Browser 环境</h3><p>使用 Mock Service Worker CLI 工具在项目根目录执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx msw init &lt;PUBLIC_DIR&gt; --save</span><br></pre></td></tr></table></figure><p>将 <code>&lt;PUBLIC_DIR&gt;</code> 替换成你项目中的 public 目录。比如，使用的是 Create React App 创建的项目应执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx msw init public/ --save</span><br></pre></td></tr></table></figure><p><a href="https://mswjs.io/docs/getting-started/integrate/browser#where-is-my-public-directory">如何确定 <code>public</code> 目录？</a></p><h4 id="配置-worker"><a href="#配置-worker" class="headerlink" title="配置 worker"></a>配置 worker</h4><ul><li><p>在 <code>src/mocks</code> 目录下创建 <code>browser.js</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ touch src/mocks/browser.js</span><br></pre></td></tr></table></figure></li><li><p>从 <code>msw</code> 导入 <code>setupWorker</code> 方法，把上面创建的 <code>src/mocks/handler.js</code> 文件中的 <code>handler</code> 也一并导入进来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/mocks/browser.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; setupWorker &#125; <span class="keyword">from</span> <span class="string">&quot;msw&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; handlers &#125; <span class="keyword">from</span> <span class="string">&quot;./handlers&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// This configures a Service Worker with the given request handlers.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> worker = setupWorker(...handlers);</span><br></pre></td></tr></table></figure></li></ul><h4 id="启动-worker"><a href="#启动-worker" class="headerlink" title="启动 worker"></a>启动 worker</h4><p>Mock Service Worker 不应被用于生产环境，应在测试环境中使用：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&quot;react-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">&quot;development&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; worker &#125; = <span class="built_in">require</span>(<span class="string">&quot;./mocks/browser&quot;</span>);</span><br><span class="line">  worker.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure><h4 id="验证和检查"><a href="#验证和检查" class="headerlink" title="验证和检查"></a>验证和检查</h4><p>在浏览器控制台中应能看到打印出的成功的消息：</p><p><img src="https://gitee.com/smpower/oss/raw/master/hi-ruofei.com/XGFC5j.png" alt="验证和检查 msw"></p><h3 id="集成到-Node-环境"><a href="#集成到-Node-环境" class="headerlink" title="集成到 Node 环境"></a>集成到 Node 环境</h3><p>参阅 <a href="https://mswjs.io/docs/getting-started/integrate/node">这里</a> 的文档说明，按照步骤可将 msw 集成到 Node 环境。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Mock Service Worker 是一个非常强大的 mock server 库，可查看 <a href="https://mswjs.io/">官网</a> 查看详细信息。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;在项目根目录执行以下命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install msw --save-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yarn add msw --dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="前端" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Mock Server" scheme="https://hi-ruofei.com/categories/%E5%89%8D%E7%AB%AF/Mock-Server/"/>
    
    
    <category term="server" scheme="https://hi-ruofei.com/tags/server/"/>
    
    <category term="Mock Service Worker" scheme="https://hi-ruofei.com/tags/Mock-Service-Worker/"/>
    
    <category term="msw" scheme="https://hi-ruofei.com/tags/msw/"/>
    
  </entry>
  
  <entry>
    <title>React Hook 之封装 useArray 自定义 hook</title>
    <link href="https://hi-ruofei.com/post/9499c45d/"/>
    <id>https://hi-ruofei.com/post/9499c45d/</id>
    <published>2021-02-22T17:23:17.000Z</published>
    <updated>2021-02-22T17:23:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在对数组操作时，我们经常要执行新增或删除数组元素的操作，将一些常用的数组操作封装成 React 自定义 hook 使用会非常方便。下面将封装一个自定义的 <code>useArray</code> React hook，实现数组的取值、设置值、添加、删除和清理数组的功能。</p><span id="more"></span><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * use-array.tsx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装 useArray 自定义 React hook</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Array&#125;</span> </span>initialArray 要处理的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Array&#125;</span> </span>Object.value 处理过后的数组元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Function&#125;</span> </span>Object.setValue 更新数组的方法，该方法是 `useState()` 方法返回的用于更新 state 的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Function&#125;</span> </span>Object.add 向数组末尾添加元素的方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Function&#125;</span> </span>Object.clear 该方法会将传入的数组清空</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;Function&#125;</span> </span>Object.removeIndex 该方法会将指定的数组元素从数组中移除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useArray = <span class="function">(<span class="params">initialArray</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(initialArray);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    value,</span><br><span class="line">    setValue,</span><br><span class="line">    <span class="attr">add</span>: <span class="function">(<span class="params">item</span>) =&gt;</span> setValue([...value, item]),</span><br><span class="line">    <span class="attr">clear</span>: <span class="function">() =&gt;</span> setValue([]),</span><br><span class="line">    <span class="attr">removeIndex</span>: <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> copy = [...value];</span><br><span class="line">      copy.splice(index, <span class="number">1</span>);</span><br><span class="line">      setValue(copy);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面封装的自定义 hook <code>useArray</code> 将返回一系列对处理数组有用的方法和值：</p><ul><li><code>value</code>：处理过后的数组元素。</li><li><code>setValue</code>：该方法是 <code>useState()</code> 方法返回的用于更新数组的方法。</li><li><code>add</code>：该方法接受一个任意值，允许用户向数组末尾添加一个新元素。</li><li><code>clear</code>：该方法会把传入的数组中的元素清空。</li><li><code>removeIndex</code>：该方法接受一个数组元素的下标，会将数组中对应该下标的元素从数组中移除。</li></ul><p>使用方法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> useArray <span class="keyword">from</span> <span class="string">&quot;use-array&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// &#123; value, setValue, add, clear, removeIndex &#125; = useArray(initialArray);</span></span><br><span class="line">  <span class="keyword">const</span> &#123; value, add &#125; = useArray([</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Olive&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Jack&quot;</span> &#125;,</span><br><span class="line">  ]);</span><br><span class="line">  add(&#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;Amy&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;value ? <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;value.id&#125;</span>&gt;</span>&#123;value.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> : null&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UserList;</span><br></pre></td></tr></table></figure><p>之后，根据业务场景可随时向 <code>useArray</code> 自定义 hook 中添加额外逻辑。一处添加，到处使用。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;在对数组操作时，我们经常要执行新增或删除数组元素的操作，将一些常用的数组操作封装成 React 自定义 hook 使用会非常方便。下面将封装一个自定义的 &lt;code&gt;useArray&lt;/code&gt; React hook，实现数组的取值、设置值、添加、删除和清理数组的功能。&lt;/p&gt;</summary>
    
    
    
    <category term="React" scheme="https://hi-ruofei.com/categories/React/"/>
    
    
    <category term="React Hooks" scheme="https://hi-ruofei.com/tags/React-Hooks/"/>
    
    <category term="React 钩子函数" scheme="https://hi-ruofei.com/tags/React-%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
    
    <category term="React 自定义 Hook" scheme="https://hi-ruofei.com/tags/React-%E8%87%AA%E5%AE%9A%E4%B9%89-Hook/"/>
    
  </entry>
  
  <entry>
    <title>React Hook 之封装 useMount 自定义 hook</title>
    <link href="https://hi-ruofei.com/post/4d20296b/"/>
    <id>https://hi-ruofei.com/post/4d20296b/</id>
    <published>2021-02-22T13:49:34.000Z</published>
    <updated>2021-02-22T13:49:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>下面是一个使用 React 编写的函数式组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * user-list.jsx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [users, setUsers] = useState([]);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fetch(<span class="string">&#x27;/users&#x27;</span>).then(<span class="keyword">async</span> response =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">        setUsers(<span class="keyword">await</span> response.json());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// do something...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;users ? users.map((user) =&gt; (</span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">       )) : null&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UserList;</span><br></pre></td></tr></table></figure><span id="more"></span><p>当组件 <code>UserList</code> 初次加载时，调用了一次获取用户数据的接口，该接口的返回值用来渲染页面上的用户列表。<code>useEffect</code> 函数的第二个参数就表示这个 hook 在组件渲染到页面后只会调用一次，可以编写一个自定义 hook 将这种只执行一次的 effect 抽象成自定义 hook。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * use-mount.jsx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useMount = <span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (callback &amp;&amp; <span class="keyword">typeof</span> callback === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      callback();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useMount;</span><br></pre></td></tr></table></figure><p>调用 <code>useMount</code> 自定义 hook 时传入一个函数作为参数，<code>useMount</code> 会去执行这个回调函数，并且只会在组件渲染到页面后只执行一次。使用方法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * user-list.jsx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> useMount <span class="keyword">from</span> <span class="string">&#x27;use-mount&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> UserList = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [users, setUsers] = useState([]);</span><br><span class="line">  useMount(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    fetch(<span class="string">&#x27;/users&#x27;</span>).then(<span class="keyword">async</span> response =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">        setUsers(<span class="keyword">await</span> response.json());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// do something...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;users ? users.map((user) =&gt; (</span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span>&gt;</span>&#123;user.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">       )) : null&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> UserList;</span><br></pre></td></tr></table></figure><p>可以发现，和直接使用 <code>useEffect</code> 很相似，区别是使用 <code>useMount</code> 自定义 hook 时省略了 <code>useEffect</code> hook 的第二个参数空数组。之后就可以把只在组件加载后执行一次的副作用操作都写在 <code>useMount</code> 自定义 hook 中了。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;下面是一个使用 React 编写的函数式组件：&lt;/p&gt;
&lt;figure class=&quot;highlight jsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; * user-list.jsx&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; React, &amp;#123; useState, useEffect &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;react&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; UserList = &lt;span class=&quot;function&quot;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; [users, setUsers] = useState([]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  useEffect(&lt;span class=&quot;function&quot;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fetch(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/users&amp;#x27;&lt;/span&gt;).then(&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; response =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.ok) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setUsers(&lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; response.json());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// do something...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, []);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;      &amp;#123;users ? users.map((user) =&amp;gt; (&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;         &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;key&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;user.id&amp;#125;&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;user.name&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;       )) : null&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;xml&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; UserList;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="React" scheme="https://hi-ruofei.com/categories/React/"/>
    
    
    <category term="React Hooks" scheme="https://hi-ruofei.com/tags/React-Hooks/"/>
    
    <category term="React 钩子函数" scheme="https://hi-ruofei.com/tags/React-%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0/"/>
    
    <category term="React 自定义 Hook" scheme="https://hi-ruofei.com/tags/React-%E8%87%AA%E5%AE%9A%E4%B9%89-Hook/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 插件之 HtmlWebpackPlugin</title>
    <link href="https://hi-ruofei.com/post/6409f2be/"/>
    <id>https://hi-ruofei.com/post/6409f2be/</id>
    <published>2021-01-27T23:29:23.000Z</published>
    <updated>2021-01-27T23:29:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>该插件将为你生成一个 HTML5 文件，用以服务 webpack 编译输出的 bundle。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev html-webpack-plugin <span class="comment"># or yarn add --dev html-webpack-plugin</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p>该插件会为你生成一个 HTML5 文件，在文件的 <code>body</code> 标签中包含 webpack 编译输出的所有 bundle 文件。你只需要在 webpack 配置文件中启用该插件即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">&quot;./dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;index_bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> HtmlWebpackPlugin()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>webpack 编译后会在 dist 目录下创建一个 index.html 文件，文件中将包含以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack App<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index_bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>要查看该插件所有配置项，参考<a href="https://github.com/jantimon/html-webpack-plugin#plugins">插件文档</a>。</p><div class="post-ggad"><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-6487844781006261" data-ad-slot="3432081921"></ins><script>(adsbygoogle = window.adsbygoogle || []).push({});</script></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;该插件将为你生成一个 HTML5 文件，用以服务 webpack 编译输出的 bundle。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev html-webpack-plugin &lt;span class=&quot;comment&quot;&gt;# or yarn add --dev html-webpack-plugin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Webpack" scheme="https://hi-ruofei.com/categories/Webpack/"/>
    
    
    <category term="插件" scheme="https://hi-ruofei.com/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
</feed>
